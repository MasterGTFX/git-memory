@@ -1,15 +1,174 @@
- # Byte-compiled / optimized / DLL files
- __pycache__/
- *.py[cod]
- # Distribution / packaging
- *.egg-info/
- dist/
- build/
- # Virtual environments
- .env
- .venv
- # History output
- .history/
- # Editor directories and files
- .vscode/
- .idea/
\ No newline at end of file
+# Byte-compiled / optimized / DLL files
+__pycache__/
+*.py[cod]
+*$py.class
+
+# C extensions
+*.so
+
+# Distribution / packaging
+.Python
+build/
+develop-eggs/
+dist/
+downloads/
+eggs/
+.eggs/
+lib/
+lib64/
+parts/
+sdist/
+var/
+wheels/
+share/python-wheels/
+*.egg-info/
+.installed.cfg
+*.egg
+MANIFEST
+
+# PyInstaller
+#  Usually these files are written by a python script from a template
+#  before PyInstaller builds the exe, so as to inject date/other infos into it.
+*.manifest
+*.spec
+
+# Installer logs
+pip-log.txt
+pip-delete-this-directory.txt
+
+# Unit test / coverage reports
+htmlcov/
+.tox/
+.nox/
+.coverage
+.coverage.*
+.cache
+nosetests.xml
+coverage.xml
+*.cover
+*.py,cover
+.hypothesis/
+.pytest_cache/
+cover/
+
+# Translations
+*.mo
+*.pot
+
+# Django stuff:
+*.log
+local_settings.py
+db.sqlite3
+db.sqlite3-journal
+
+# Flask stuff:
+instance/
+.webassets-cache
+
+# Scrapy stuff:
+.scrapy
+
+# Sphinx documentation
+docs/_build/
+
+# PyBuilder
+.pybuilder/
+target/
+
+# Jupyter Notebook
+.ipynb_checkpoints
+
+# IPython
+profile_default/
+ipython_config.py
+
+# pyenv
+#   For a library or package, you might want to ignore these files since the code is
+#   intended to run in multiple environments; otherwise, check them in:
+# .python-version
+
+# pipenv
+#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
+#   However, in case of collaboration, if having platform-specific dependencies or dependencies
+#   having no cross-platform support, pipenv may install dependencies that don't work, or not
+#   install all needed dependencies.
+#Pipfile.lock
+
+# UV
+#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
+#   This is especially recommended for binary packages to ensure reproducibility, and is more
+#   commonly ignored for libraries.
+#uv.lock
+
+# poetry
+#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
+#   This is especially recommended for binary packages to ensure reproducibility, and is more
+#   commonly ignored for libraries.
+#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
+#poetry.lock
+
+# pdm
+#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
+#pdm.lock
+#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
+#   in version control.
+#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
+.pdm.toml
+.pdm-python
+.pdm-build/
+
+# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
+__pypackages__/
+
+# Celery stuff
+celerybeat-schedule
+celerybeat.pid
+
+# SageMath parsed files
+*.sage.py
+
+# Environments
+.env
+.venv
+env/
+venv/
+ENV/
+env.bak/
+venv.bak/
+
+# Spyder project settings
+.spyderproject
+.spyproject
+
+# Rope project settings
+.ropeproject
+
+# mkdocs documentation
+/site
+
+# mypy
+.mypy_cache/
+.dmypy.json
+dmypy.json
+
+# Pyre type checker
+.pyre/
+
+# pytype static type analyzer
+.pytype/
+
+# Cython debug symbols
+cython_debug/
+
+# PyCharm
+#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
+#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
+#  and can be added to the global gitignore or merged into this file.  For a more nuclear
+#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
+#.idea/
+
+# Ruff stuff:
+.ruff_cache/
+
+# PyPI configuration file
+.pypirc
@@ -1,21 +1,21 @@
-MIT License
-
-Copyright (c) 2025 Dominik Baran
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
+MIT License
+
+Copyright (c) 2025 Dominik Baran
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
@@ -1,184 +1,184 @@
-# **Project Name: `git-memory`**
-
-## **Tagline**
-
-> *AI-powered commit-by-commit memory and structure tracking for your Git projects.*
-
----
-
-## **Project Summary**
-
-`git-memory` is a Python CLI tool and library that walks through a Git repository’s history to generate a detailed memory (`memory.md`), a structural diagram (`structure.mmd`), and a patch (`history.md`) per commit (or commit group). 
-It integrates with AI providers (like OpenAI) to generate summaries and visual diagrams that reflect the evolution of the project.
-Each commit (or group of commits) gets:
-
-* a natural-language memory (`memory.md`)
-* a Mermaid diagram (`structure.mmd`)
-* a history file with the patches (`history.md`)
-
-Each commit (or related group of commits) for these files should capture:
-
-* **removal** of deprecated data.
-* **updates** made to existing data.
-* **addition** of new, meaningful content.
-
-This tool helps developers track how their code evolves, understand dependencies, and explore potential optimizations — all through structured AI-generated documentation.
-
----
-
-## **Key Use Cases**
-
-### 1. **Historical Project Memory**
-
-Generate a complete commit-by-commit history that can be:
-
-* Used as input for another AI to understand how the project evolved
-* Shared with new team members to quickly get them up to speed
-* Used as a changelog-like document with deep context
-
-### 2. **Structure Visualization**
-
-Mermaid diagrams show structural components of the project as they change over time:
-
-* Classes, files, services, and their relationships
-* Visual dependency tracking
-* Useful for architecture reviews or onboarding
-
-### 3. **AI-Based Refactoring Suggestions**
-
-By analyzing the `memory.md` history:
-
-* An LLM could suggest project-level refactors
-* Spot tech debt patterns or architectural inconsistencies
-* Help with migration planning or performance reviews
-
-### 4. **Educational / Research Tool**
-
-* Understand how real-world software evolves over time
-* Ideal for students, researchers, or technical writers
-* Easy to visualize open source projects' evolution
-
-### 5. **LLM Preprocessor**
-
-Use `.history/` as a **knowledge base** input for an LLM agent:
-
-* Generate context-rich embeddings for Retrieval-Augmented Generation (RAG)
-* Power AI agents with structured memory of a codebase
-
----
-
-## **Visual and UX Features (CLI)**
-
-### **Polished CLI Interface**
-
-* **Colored output** (via `rich`)
-* Shows:
-
-  * Commit hash, message
-  * Time range
-  * Number of lines changed
-  * Tokens sent/received
-* **Live animation** (e.g., spinner or progress bar)
-* Summary table after each run:
-
-  * Commits processed
-  * Files touched
-  * Total token cost
-  * Time spent
-
-### **Example CLI Output**
-
-```
-[git-memory] Processing commit abc123 - "Add user auth flow" (312 LOC changed)
-  → Generating diff        ✅
-  → Sending to LLM         ✉️ (2,354 tokens)
-  → Received memory.md     ✅
-  → Received structure.mmd ✅
-  → Saved to .history/abc123/
-
-Summary:
-• Commits analyzed: 1
-• Total tokens: 2,354 sent, 1,930 received
-• Total time: 12.3s
-```
-
----
-
-## **Technical Additions**
-
-### **Language & Version**
-
-* Written in **Python 3.11+**
-* Uses `typer` or `click` for CLI
-* `rich` or `textual` for colored + structured terminal output
-
-### **.history/ Folder Structure**
-
-```
-.history/ (current HEAD)
-│   memory.md 
-│   history.md
-│   structure.mmd
-├── <commit_hash>/  (history)
-│   ├── memory.md
-│   ├── diff.patch
-│   └── structure.mmd
-```
-
-If commit grouping is used, the folder is named using the **last commit hash** in the group.
-
-### **CLI Usage**
-
-```bash
-git-memory /path/to/repo
-
-# Optional arguments:
---model-provider openai|openrouter
---model gpt-4o|gemini-2.5-flash-preview
---min-commits 1                        # group commits by number (default 1)
---min-diff-lines 100                   # minimum diff lines threshold (default None)
-```
-
-### **Commit Grouping + Smart Tracking**
-
-* Can group N commits using `--min-commits N`
-* Commits skipped (due to grouping or `--min-diff-lines`) are tracked
-* Tool intelligently resumes after the last processed commit group
-* Ensures no overlapping or duplicate `.history/` entries
-
-
-### **Configuration**
-
-* CLI flags override config
-* Config stored in `config.py`
-* API key & model defaults (GPT-4o via OpenAI)
-* Easily switch to OpenRouter, Local (Ollama etc.) by allowing to override BASE_URL
-
-### **Prompt System**
-
-* Prompts defined in `prompts/` as `.md` files
-* Can be edited or templated:
-
-  * `system.md`
-  * `memory_prompt.md`
-  * `diagram_prompt.md`
-
----
-
-## **Development Goals**
-
-* Focused and minimal MVP
-* Safe Git operations only
-* No changes to the original repo
-* Supports both **Linux** and **Windows**
-* No overengineering, just clean modular code
-
----
-
-## **Next Steps**
-
-* Initial `pyproject.toml`
-* CLI boilerplate (`argparse` or `typer`)
-* AI abstraction for OpenAI
-* First working version of `.history/` generation with dummy prompts
-
+# **Project Name: `git-memory`**
+
+## **Tagline**
+
+> *AI-powered commit-by-commit memory and structure tracking for your Git projects.*
+
+---
+
+## **Project Summary**
+
+`git-memory` is a Python CLI tool and library that walks through a Git repository’s history to generate a detailed memory (`memory.md`), a structural diagram (`structure.mmd`), and a patch (`history.md`) per commit (or commit group). 
+It integrates with AI providers (like OpenAI) to generate summaries and visual diagrams that reflect the evolution of the project.
+Each commit (or group of commits) gets:
+
+* a natural-language memory (`memory.md`)
+* a Mermaid diagram (`structure.mmd`)
+* a history file with the patches (`history.md`)
+
+Each commit (or related group of commits) for these files should capture:
+
+* **removal** of deprecated data.
+* **updates** made to existing data.
+* **addition** of new, meaningful content.
+
+This tool helps developers track how their code evolves, understand dependencies, and explore potential optimizations — all through structured AI-generated documentation.
+
+---
+
+## **Key Use Cases**
+
+### 1. **Historical Project Memory**
+
+Generate a complete commit-by-commit history that can be:
+
+* Used as input for another AI to understand how the project evolved
+* Shared with new team members to quickly get them up to speed
+* Used as a changelog-like document with deep context
+
+### 2. **Structure Visualization**
+
+Mermaid diagrams show structural components of the project as they change over time:
+
+* Classes, files, services, and their relationships
+* Visual dependency tracking
+* Useful for architecture reviews or onboarding
+
+### 3. **AI-Based Refactoring Suggestions**
+
+By analyzing the `memory.md` history:
+
+* An LLM could suggest project-level refactors
+* Spot tech debt patterns or architectural inconsistencies
+* Help with migration planning or performance reviews
+
+### 4. **Educational / Research Tool**
+
+* Understand how real-world software evolves over time
+* Ideal for students, researchers, or technical writers
+* Easy to visualize open source projects' evolution
+
+### 5. **LLM Preprocessor**
+
+Use `.history/` as a **knowledge base** input for an LLM agent:
+
+* Generate context-rich embeddings for Retrieval-Augmented Generation (RAG)
+* Power AI agents with structured memory of a codebase
+
+---
+
+## **Visual and UX Features (CLI)**
+
+### **Polished CLI Interface**
+
+* **Colored output** (via `rich`)
+* Shows:
+
+  * Commit hash, message
+  * Time range
+  * Number of lines changed
+  * Tokens sent/received
+* **Live animation** (e.g., spinner or progress bar)
+* Summary table after each run:
+
+  * Commits processed
+  * Files touched
+  * Total token cost
+  * Time spent
+
+### **Example CLI Output**
+
+```
+[git-memory] Processing commit abc123 - "Add user auth flow" (312 LOC changed)
+  → Generating diff        ✅
+  → Sending to LLM         ✉️ (2,354 tokens)
+  → Received memory.md     ✅
+  → Received structure.mmd ✅
+  → Saved to .history/abc123/
+
+Summary:
+• Commits analyzed: 1
+• Total tokens: 2,354 sent, 1,930 received
+• Total time: 12.3s
+```
+
+---
+
+## **Technical Additions**
+
+### **Language & Version**
+
+* Written in **Python 3.11+**
+* Uses `typer` or `click` for CLI
+* `rich` or `textual` for colored + structured terminal output
+
+### **.history/ Folder Structure**
+
+```
+.history/ (current HEAD)
+│   memory.md 
+│   history.md
+│   structure.mmd
+├── <commit_hash>/  (history)
+│   ├── memory.md
+│   ├── diff.patch
+│   └── structure.mmd
+```
+
+If commit grouping is used, the folder is named using the **last commit hash** in the group.
+
+### **CLI Usage**
+
+```bash
+git-memory /path/to/repo
+
+# Optional arguments:
+--model-provider openai|openrouter
+--model gpt-4o|gemini-2.5-flash-preview
+--min-commits 1                        # group commits by number (default 1)
+--min-diff-lines 100                   # minimum diff lines threshold (default None)
+```
+
+### **Commit Grouping + Smart Tracking**
+
+* Can group N commits using `--min-commits N`
+* Commits skipped (due to grouping or `--min-diff-lines`) are tracked
+* Tool intelligently resumes after the last processed commit group
+* Ensures no overlapping or duplicate `.history/` entries
+
+
+### **Configuration**
+
+* CLI flags override config
+* Config stored in `config.py`
+* API key & model defaults (GPT-4o via OpenAI)
+* Easily switch to OpenRouter, Local (Ollama etc.) by allowing to override BASE_URL
+
+### **Prompt System**
+
+* Prompts defined in `prompts/` as `.md` files
+* Can be edited or templated:
+
+  * `system.md`
+  * `memory_prompt.md`
+  * `diagram_prompt.md`
+
+---
+
+## **Development Goals**
+
+* Focused and minimal MVP
+* Safe Git operations only
+* No changes to the original repo
+* Supports both **Linux** and **Windows**
+* No overengineering, just clean modular code
+
+---
+
+## **Next Steps**
+
+* Initial `pyproject.toml`
+* CLI boilerplate (`argparse` or `typer`)
+* AI abstraction for OpenAI
+* First working version of `.history/` generation with dummy prompts
+
@@ -1,2 +0,0 @@
-# Package initialization for git-memory.
-__version__ = "0.1.0"
\ No newline at end of file
@@ -1,27 +0,0 @@
-import typer
-from git_memory.config import Config
-from git_memory.history import generate_history
-
-app = typer.Typer(
-    help="AI-powered commit-by-commit memory and structure tracking for Git projects."
-)
-
-@app.command()
-def main(
-    repo_path: str = typer.Argument(..., exists=True, file_okay=False, dir_okay=True, help="Path to the Git repository"),
-    min_commits: int = typer.Option(Config.min_commits, "--min-commits", help="Group commits by number"),
-    min_diff_lines: int | None = typer.Option(Config.min_diff_lines, "--min-diff-lines", help="Minimum diff lines threshold"),
-    model_provider: str = typer.Option(Config.model_provider, "--model-provider", help="Model provider (openai or openrouter)"),
-    model: str = typer.Option(Config.model, "--model", help="Model name"),
-):
-    """Generate AI-based git memory for the specified repository."""
-    typer.secho(f"Repository: {repo_path}", fg=typer.colors.GREEN)
-    typer.secho(f"Group commits by: {min_commits}", fg=typer.colors.BLUE)
-
-    typer.secho("Generating history...", fg=typer.colors.YELLOW)
-    generate_history(repo_path, min_commits, min_diff_lines)
-    typer.secho("History generation complete. See .history/ directory.", fg=typer.colors.GREEN)
-
-
-if __name__ == "__main__":
-    app()
\ No newline at end of file
@@ -1,17 +0,0 @@
-"""
-AI provider abstraction module.
-"""
-
-from git_memory.config import Config
-
-def summarize_diff(diff_text: str) -> str:
-    """
-    Summarize a diff string into natural-language memory.
-    """
-    raise NotImplementedError
-
-def generate_diagram(structure_data: dict) -> str:
-    """
-    Generate Mermaid diagram from project structure data.
-    """
-    raise NotImplementedError
\ No newline at end of file
@@ -1,21 +0,0 @@
-"""
-Configuration module for git-memory.
-"""
-
-import os
-from typing import Optional
-
-class Config:
-    """
-    CLI configuration options and defaults.
-    """
-    # Default model provider: openai or openrouter
-    model_provider: str = "openai"
-    # Default AI model name
-    model: str = "gpt-4o"
-    # Minimum number of commits to group
-    min_commits: int = 1
-    # Minimum number of diff lines to include a commit group
-    min_diff_lines: Optional[int] = None
-    # API key for AI provider (from environment)
-    api_key: Optional[str] = os.getenv("OPENAI_API_KEY")
\ No newline at end of file
@@ -1,43 +0,0 @@
-"""
-History generation stub for git-memory.
-"""
-
-import os
-from git import Repo
-
-def generate_history(repo_path: str, min_commits: int, min_diff_lines: int | None) -> None:
-    """
-    Walk through commits and generate stub history files for each commit.
-    """
-    repo = Repo(repo_path)
-    history_dir = os.path.join(os.getcwd(), ".history")
-    os.makedirs(history_dir, exist_ok=True)
-
-    commits = list(repo.iter_commits(max_count=min_commits))
-    for commit in commits:
-        commit_dir = os.path.join(history_dir, commit.hexsha)
-        os.makedirs(commit_dir, exist_ok=True)
-
-        # Write dummy memory
-        with open(os.path.join(commit_dir, "memory.md"), "w") as f:
-            f.write(f"# Memory for commit {commit.hexsha}\n\n_Dummy memory_\n")
-
-        # Write dummy structure diagram
-        with open(os.path.join(commit_dir, "structure.mmd"), "w") as f:
-            f.write(f"%% Dummy diagram for commit {commit.hexsha}\n")
-
-        # Write diff patch
-        parent = commit.parents[0] if commit.parents else None
-        diff = repo.git.diff(parent, commit.hexsha)
-        with open(os.path.join(commit_dir, "diff.patch"), "w") as f:
-            f.write(diff)
-
-    # Stub aggregated files
-    with open(os.path.join(history_dir, "memory.md"), "w") as f:
-        f.write("## Dummy aggregated memory\n")
-
-    with open(os.path.join(history_dir, "structure.mmd"), "w") as f:
-        f.write("%% Dummy aggregated diagram\n")
-
-    with open(os.path.join(history_dir, "history.md"), "w") as f:
-        f.write("## Dummy aggregated patches\n")
\ No newline at end of file
@@ -1 +0,0 @@
- <!-- Diagram prompt: instructions for generating Mermaid diagrams of project structure -->
\ No newline at end of file
@@ -1 +0,0 @@
- <!-- Memory prompt: instructions for generating natural-language memory per commit -->
\ No newline at end of file
@@ -1 +0,0 @@
- <!-- System prompt: defines the AI listener role for git-memory -->
\ No newline at end of file
@@ -1,19 +0,0 @@
- [project]
- name = "git-memory"
- version = "0.1.0"
- description = "AI-powered commit-by-commit memory and structure tracking for Git projects."
- readme = "PROJECT.md"
- license = { file = "LICENSE" }
- requires-python = ">=3.11"
- authors = [
-     { name = "Dominik Baran" },
- ]
- dependencies = [
-     "typer>=0.9.0",
-     "rich>=10.0.0",
-     "gitpython>=3.1.0",
-     "openai>=0.26.0",
- ]
-
- [project.scripts]
- git-memory = "git_memory.__main__:app"
\ No newline at end of file
