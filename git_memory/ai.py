"""
AI provider abstraction module.
"""

import openai
from git_memory.config import Config
import os

# Define the paths to the prompt files
PROMPT_DIR = os.path.join(os.path.dirname(__file__), "..", "prompts")
SYSTEM_PROMPT_FILE = os.path.join(PROMPT_DIR, "system.md")
MEMORY_PROMPT_FILE = os.path.join(PROMPT_DIR, "memory_prompt.md")
DIAGRAM_PROMPT_FILE = os.path.join(PROMPT_DIR, "diagram_prompt.md")


def summarize_diff(diff_text: str) -> str:
    """
    Summarize a diff string into natural-language memory.
    """
    if not Config.api_key:
        raise ValueError("OpenAI API key is not set. Please set the OPENAI_API_KEY environment variable.")

    try:
        with open(SYSTEM_PROMPT_FILE, "r", encoding="utf-8") as f:
            system_prompt = f.read()
        with open(MEMORY_PROMPT_FILE, "r", encoding="utf-8") as f:
            memory_prompt_template = f.read()
    except FileNotFoundError as e:
        raise FileNotFoundError(f"Prompt file not found: {e.filename}. Ensure 'prompts/system.md' and 'prompts/memory_prompt.md' exist.") from e

    # Replace placeholder in the memory prompt
    user_prompt = memory_prompt_template.replace("{{diff_text}}", diff_text)

    try:
        client_params = {"api_key": Config.api_key}
        if Config.openai_api_base:
            client_params["base_url"] = Config.openai_api_base
        
        client = openai.OpenAI(**client_params)

        completion = client.chat.completions.create(
            model=Config.model,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt},
            ],
        )
        summary = completion.choices[0].message.content
        if not summary:
            # Handle cases where the summary might be empty or None
            return "No summary could be generated."
        return summary.strip()
    except openai.APIError as e:
        # Handle OpenAI API errors specifically
        raise RuntimeError(f"OpenAI API error: {e}") from e
    except Exception as e:
        # Handle other potential errors during the API call or processing
        raise RuntimeError(f"Failed to generate summary: {e}") from e

def generate_diagram(structure_data: dict) -> str:
    """
    Generate Mermaid diagram from project structure data.
    """
    if not Config.api_key:
        raise ValueError("OpenAI API key is not set. Please set the OPENAI_API_KEY environment variable.")

    try:
        with open(SYSTEM_PROMPT_FILE, "r", encoding="utf-8") as f:
            system_prompt = f.read()
        with open(DIAGRAM_PROMPT_FILE, "r", encoding="utf-8") as f:
            diagram_prompt_template = f.read()
    except FileNotFoundError as e:
        raise FileNotFoundError(f"Prompt file not found: {e.filename}. Ensure 'prompts/system.md' and 'prompts/diagram_prompt.md' exist.") from e

    files = structure_data.get("files", [])
    if not files:
        return "%% No files provided to generate a diagram. %%"
    
    file_list_str = "\n".join(files)
    user_prompt = diagram_prompt_template.replace("{{file_list}}", file_list_str)

    try:
        client_params = {"api_key": Config.api_key}
        if Config.openai_api_base:
            client_params["base_url"] = Config.openai_api_base
        
        client = openai.OpenAI(**client_params)

        completion = client.chat.completions.create(
            model=Config.model,
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt},
            ],
        )
        
        response_content = completion.choices[0].message.content
        if not response_content:
            return "%% No diagram could be generated by the AI. %%"

        # Extract Mermaid code, removing backticks and "mermaid" language specifier
        if response_content.strip().startswith("```mermaid"):
            response_content = response_content.split("```mermaid", 1)[1]
            if response_content.strip().endswith("```"):
                 response_content = response_content.rsplit("```", 1)[0]
        elif response_content.strip().startswith("```"):
            response_content = response_content.split("```", 1)[1]
            if response_content.strip().endswith("```"):
                response_content = response_content.rsplit("```", 1)[0]
        
        # Check if the result is just whitespace or a refusal
        if not response_content.strip() or "sorry" in response_content.lower() or "unable to generate" in response_content.lower() :
             return "%% AI was unable to generate a valid diagram. %%"

        return response_content.strip()

    except openai.APIError as e:
        raise RuntimeError(f"OpenAI API error during diagram generation: {e}") from e
    except Exception as e:
        raise RuntimeError(f"Failed to generate diagram: {e}") from e